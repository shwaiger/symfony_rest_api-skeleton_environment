version: "3.7"

services:
#    mysql:
#        # 8.0.20 is the latest MySQL version that supported by AWS
#        image: mysql:8.0.20
#        command: --default-authentication-plugin=mysql_native_password
#        environment:
#            MYSQL_DATABASE:      ${MYSQL_DATABASE:-db}
#            MYSQL_USER:          ${MYSQL_USER:-mysql}
#            MYSQL_PASSWORD:      ${MYSQL_PASSWORD:-mysql}
#            MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root}
#        container_name: mysql
#        ports:
#            - 127.0.0.1:${FORWARDED_PORT_DB:-3306}:3306
#        volumes:
#            - ${DB_DATA_PATH:-./../.data/mysql}:/var/lib/mysql
#        restart: unless-stopped

    postgresql:
        image: "postgres:12.5"
        environment:
            POSTGRES_DB: ${POSTGRES_DATABASE:-api_db}
            POSTGRES_USER: ${POSTGRES_USER:-postgres}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
        container_name: postgresql
        ports:
            - ${FORWARDED_PORT_DB:-5432}:5432
        volumes:
            - "${DB_DATA_PATH:-./../.data/postgresql}/:/var/lib/postgresql/data"
        restart: unless-stopped

    php:
        build:
            context: ./php
            dockerfile: Dockerfile
            args:
                CONTEXT_ENV: ${PHP_CONTEXT_ENV:-dev}
        container_name: php
        volumes:
            - ${PHP_APP_PATH:-./../symfony-api-skeleton-back}:/app
            - ./php/php-common.ini:/usr/local/etc/php/conf.d/app-php-common.ini:ro
        environment:
            - DATABASE_URL=pgsql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgresql:5432/${POSTGRES_DATABASE:-api_db}
        restart: unless-stopped
        depends_on:
            - postgresql

    php-cron:
        build:
            context: ./php-cli
            dockerfile: Dockerfile
            args:
                CONTEXT_FOLDER: cron
                CONTEXT_ENV: ${PHP_CONTEXT_ENV:-dev}
        container_name: php-cron
        volumes:
            - ${PHP_APP_PATH:-./../symfony-api-skeleton-back}:/app
            - ./php/php-common.ini:/usr/local/etc/php/conf.d/app-php-common.ini:ro
        environment:
            - DATABASE_URL=pgsql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgresql:5432/${POSTGRES_DATABASE:-api_db}
        restart: unless-stopped
        depends_on:
            - postgresql

    php-consumer-worker:
        build:
            context: ./php-cli
            dockerfile: Dockerfile
            args:
                CONTEXT_FOLDER: consumer-worker
                CONTEXT_ENV: ${PHP_CONTEXT_ENV:-dev}
        volumes:
            - ${PHP_APP_PATH:-./../symfony-api-skeleton-back}:/app
            - ./php/php-common.ini:/usr/local/etc/php/conf.d/app-php-common.ini:ro
        environment:
            - DATABASE_URL=pgsql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgresql:5432/${POSTGRES_DATABASE:-api_db}
        restart: unless-stopped
        depends_on:
            - postgresql
        deploy:
            replicas: 2

    nginx:
        build:
            context: ./nginx
            dockerfile: Dockerfile
        ports:
            - ${FORWARDED_PORT_NGINX:-80}:80
            - ${FORWARDED_PORT_NGINX_SSL:-443}:443
        container_name: nginx
        volumes:
            - ./nginx/${NGINX_CONFIG_FILE:-conf-dev.conf}:/etc/nginx/conf.d/default.conf:ro
            - ./nginx/certs:/etc/nginx/certs
            - ${LOGS_PATH:-./../log}/nginx:/var/log/nginx
        depends_on:
            - php
        restart: unless-stopped

# todo add minio
